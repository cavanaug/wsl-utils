#!/bin/bash
#  ┌────────────────────────────────────────────────────────────────┐
#  │                                                                │
#  │    ██╗    ██╗██╗███╗   ██╗      ██████╗ ██╗   ██╗███╗   ██╗    │
#  │    ██║    ██║██║████╗  ██║      ██╔══██╗██║   ██║████╗  ██║    │
#  │    ██║ █╗ ██║██║██╔██╗ ██║█████╗██████╔╝██║   ██║██╔██╗ ██║    │
#  │    ██║███╗██║██║██║╚██╗██║╚════╝██╔══██╗██║   ██║██║╚██╗██║    │
#  │    ╚███╔███╔╝██║██║ ╚████║      ██║  ██║╚██████╔╝██║ ╚████║    │
#  │     ╚══╝╚══╝ ╚═╝╚═╝  ╚═══╝      ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝    │
#  │                                                                │
#  └────────────────────────────────────────────────────────────────┘
#  - This script is used to run windows programs via Windows PowerShell from WSL.
#  - It takes an executable name and arguments as input.
#    - Any argument that is a file or directory will be converted to a windows path
#  - If the command is part of a pipe (!isatty) it will attempt to coerce output to utf-8 with unix line endings
#  - It will run the command in powershell attempting to find it using the windows PATH
#    - Utilize winutil alias to create alias mappings that have a full path for items not in PATH
#
set -euo pipefail

# Set up environment variables for alias resolution
export WIN_WINDIR=${WIN_WINDIR:-/mnt/c/Windows}
export WIN_PROGRAMFILES=${WIN_PROGRAMFILES:-/mnt/c/Program\ Files}
export WIN_PROGRAMFILES_X86=${WIN_PROGRAMFILES_X86:-/mnt/c/Program\ Files\ \(x86\)}
export WIN_LOCALAPPDATA=${WIN_LOCALAPPDATA:-/mnt/c/Users/$USER/AppData/Local}
export WIN_APPDATA=${WIN_APPDATA:-/mnt/c/Users/$USER/AppData/Roaming}

# Function to display help information
show_help() {
    cat <<'EOF'
win-run - Execute Windows programs from WSL with automatic path conversion

SYNOPSIS
    win-run [OPTIONS] COMMAND [ARGS...]

DESCRIPTION
    win-run executes Windows programs via PowerShell from within WSL, providing
    automatic path conversion and alias support for improved interoperability.

    Key features:
    • Automatic path conversion: WSL paths are converted to Windows paths
    • UTF-8 output processing: Ensures correct text encoding from Windows programs
    • Alias support: Define shortcuts for Windows programs not in PATH

OPTIONS
    --raw           Bypass UTF-8 output processing (useful for binary output)
    --plain         Skip automatic path conversion for arguments
    -c FILE         Use custom config file instead of default hierarchy
    -v, --verbose   Show the full PowerShell command being executed
    --help          Show this help message and exit

CONFIGURATION
    Aliases are loaded from configuration files in YAML format:

    Default hierarchy (global → user):
    • ${WSLUTIL_DIR}/config/win-run.yml
    • ~/.config/wslutil/win-run.yml

    Config file format:
        aliases:
          alias-name:
            path: ${WIN_PROGRAMFILES}/App/app.exe
            options: "--flag value"

EXAMPLES
    # Run Windows command with automatic path conversion
    win-run notepad.exe /home/user/file.txt

    # Use alias from config file
    win-run brave.exe https://example.com

    # Use custom config file
    win-run -c project-aliases.yml custom-tool.exe

    # Skip path conversion for arguments (plain mode)
    win-run --plain notepad.exe C:\Users\myuser\file.txt

    # Example alias configuration: ~/.config/wslutil/win-run.yml
    aliases:
      brave.exe:
        path: ${WIN_PROGRAMFILES}/BraveSoftware/Brave-Browser/Application/brave.exe
        options: null
      devenv.exe:
        path: ${WIN_PROGRAMFILES}/Microsoft Visual Studio/2022/Community/Common7/IDE/devenv.exe
        options: null

PATH CONVERSION
    Arguments that are existing files or directories are automatically converted
    from WSL paths (e.g., /home/user/file.txt) to Windows paths
    (e.g., \\wsl.localhost\distro\home\user\file.txt).

OUTPUT PROCESSING
    By default, win-run processes PowerShell output to ensure UTF-8 encoding
    and Unix line endings. Use --raw to bypass this for direct unmodified output.

SEE ALSO
    wslutil(1), wslutil-doctor(1), win-open(1), win-browser(1)
EOF
}

# Function to resolve alias for a command
resolve_alias() {
    local cmd="$1"
    local config_files=()

    # Use custom config if specified, otherwise use default hierarchy
    if [[ -n "$CUSTOM_CONFIG" ]]; then
        config_files=("$CUSTOM_CONFIG")
    else
        config_files=(
            "${WSLUTIL_DIR:-$(dirname "$(dirname "$0")")}/config/win-run.yml"
            "${XDG_CONFIG_HOME:-$HOME/.config}/wslutil/win-run.yml"
        )
    fi

    # Check if yq is available
    if ! command -v yq >/dev/null 2>&1; then
        echo "$cmd" # Return original command if yq not available
        return
    fi

    # Try to find alias in config files (user config takes precedence)
    for config_file in "${config_files[@]}"; do
        if [[ -f "$config_file" ]]; then
            local alias_path
            alias_path=$(yq eval ".aliases.\"$cmd\".path // null" "$config_file" 2>/dev/null)

            if [[ "$alias_path" != "null" && -n "$alias_path" ]]; then
                # Resolve environment variables in the path
                alias_path=$(echo "$alias_path" | envsubst)
                # Convert to Windows path
                alias_path=$(wslpath -w "$alias_path" 2>/dev/null || echo "$alias_path")
                echo "$alias_path"
                return
            fi
        fi
    done

    # No alias found, return original command
    echo "$cmd"
}

# Function to get alias options for a command
get_alias_options() {
    local cmd="$1"
    local config_files=()

    # Use custom config if specified, otherwise use default hierarchy
    if [[ -n "$CUSTOM_CONFIG" ]]; then
        config_files=("$CUSTOM_CONFIG")
    else
        config_files=(
            "${WSLUTIL_DIR:-$(dirname "$(dirname "$0")")}/config/win-run.yml"
            "${XDG_CONFIG_HOME:-$HOME/.config}/wslutil/win-run.yml"
        )
    fi

    # Check if yq is available
    if ! command -v yq >/dev/null 2>&1; then
        return # Return empty if yq not available
    fi

    # Try to find alias options in config files (user config takes precedence)
    for config_file in "${config_files[@]}"; do
        if [[ -f "$config_file" ]]; then
            local alias_options
            alias_options=$(yq eval ".aliases.\"$cmd\".options // null" "$config_file" 2>/dev/null)

            if [[ "$alias_options" != "null" && -n "$alias_options" ]]; then
                # Resolve environment variables in the options
                alias_options=$(echo "$alias_options" | envsubst)
                echo "$alias_options"
                return
            fi
        fi
    done
}
POWERSHELL_EXE="${WIN_WINDIR}/System32/WindowsPowerShell/v1.0/powershell.exe"

#
# Forcibly ensure that output is UTF-8 encoded, need to peek at input to detect if its
# utf-16le (aka unicode) or if its already utf-8.   This is essential for processing output
# from windows called via powershell.   I have found  no mechanism to do this reliably
# in bash directly.   This is performed as an embedded python3 script so as not to add yet
# another script to the system.

# Process stdout/stderr in streaming fashion while ensuring UTF-8 encoding.
function ensure_utf8 {
    # Pipe stdin directly to the python3 interpreter.
    # ensuring the code is passed literally.
    python3 -c '
import sys
import codecs

CHUNK_SIZE = 512  # 8192

def is_utf16le(peek_buffer):
    if len(peek_buffer) < 2:
        return False

    is_bom_utf16le = peek_buffer.startswith(b"\xff\xfe")
    is_bomless_utf16le = (peek_buffer[1] == 0 and peek_buffer[0] != 0)

    return is_bom_utf16le or is_bomless_utf16le

def stream_utf16le_to_utf8(peek_buffer):
    decoder = codecs.getincrementaldecoder("utf-16-le")(errors="replace")
    encoder = codecs.getincrementalencoder("utf-8")(errors="replace")

    decoded_text = decoder.decode(peek_buffer, False)
    decoded_text = decoded_text.lstrip("\ufeff")
    if decoded_text:
        sys.stdout.buffer.write(encoder.encode(decoded_text, False))

    while True:
        chunk = sys.stdin.buffer.read(CHUNK_SIZE)
        if not chunk:
            final_text = decoder.decode(b'', True)
            if final_text:
                sys.stdout.buffer.write(encoder.encode(final_text, True))
            break

        decoded_text = decoder.decode(chunk, False)
        if decoded_text:
            sys.stdout.buffer.write(encoder.encode(decoded_text, False))

def stream_passthrough(peek_buffer):
    sys.stdout.buffer.write(peek_buffer)

    while True:
        chunk = sys.stdin.buffer.read(CHUNK_SIZE)
        if not chunk:
            break
        sys.stdout.buffer.write(chunk)

def main():
    peek_buffer = sys.stdin.buffer.read(2)

    if not peek_buffer:
        return

    if len(peek_buffer) < 2:
        sys.stdout.buffer.write(peek_buffer)
        return

    try:
        if is_utf16le(peek_buffer):
            stream_utf16le_to_utf8(peek_buffer)
        else:
            stream_passthrough(peek_buffer)
    except (UnicodeDecodeError, UnicodeEncodeError):
        sys.stdout.buffer.write(peek_buffer)
        while True:
            chunk = sys.stdin.buffer.read(CHUNK_SIZE)
            if not chunk:
                break
            sys.stdout.buffer.write(chunk)

if __name__ == "__main__":
    main()
    '
}

#
# Process full stdout/stderr before ensuring UTF-8 encoding.
function ensure_utf8f {
    # Pipe stdin directly to the python3 interpreter.
    # The 'EOF' is quoted to prevent shell expansion within the Python code,
    # ensuring the code is passed literally.
    python3 -c '
import sys

def main():
    # Read the ENTIRE raw byte stream from stdin.
    # .buffer is the crucial part that provides binary-safe I/O.
    try:
        input_bytes = sys.stdin.buffer.read()
    except (IOError, KeyboardInterrupt):
        # Handle cases where the pipe might be broken or user interrupts.
        return

    # If there is no input, there is nothing to do.
    if not input_bytes:
        return

    # Default to assuming the input is already valid.
    output_bytes = input_bytes

    # Heuristic check for UTF-16LE (with or without BOM).
    if len(input_bytes) >= 2:
        # Case 1: Check for the standard UTF-16LE BOM (FF FE).
        is_bom_utf16le = input_bytes.startswith(b"\xff\xfe")

        # Case 2: Check for BOM-less UTF-16LE (ASCII char followed by null).
        is_bomless_utf16le = (input_bytes[1] == 0 and input_bytes[0] != 0)

        if is_bom_utf16le or is_bomless_utf16le:
            try:
                # Decode the bytes from UTF-16LE into a standard Python string.
                decoded_string = input_bytes.decode("utf-16-le")
                # Re-encode the string into our target format: UTF-8.
                output_bytes = decoded_string.encode("utf-8")
            except UnicodeDecodeError:
                # If decoding fails for some reason (e.g., malformed stream),
                # fall back to printing the original bytes to avoid data loss.
                pass

    # Write the resulting bytes to stdout, again using the binary buffer.
    try:
        sys.stdout.buffer.write(output_bytes)
        sys.stdout.buffer.flush()
    except (IOError, KeyboardInterrupt):
        # Handle broken pipe on output.
        pass

if __name__ == "__main__":
    main()
'
}

CMDARGS=()
RAW_OUTPUT=false
PLAIN_MODE=false
CUSTOM_CONFIG=""
VERBOSE=false

if [[ -L "$0" ]]; then
    # Invoked via symlink
    SYM="SYM-"
    CMD_NAME=$(basename "$0")
    CMD=$(resolve_alias "$CMD_NAME")
    ALIAS_OPTIONS=$(get_alias_options "$CMD_NAME")
    ARGS_TO_PROCESS=("$@")
else
    # Invoked directly
    SYM=""

    # Parse options
    while [[ $# -gt 0 ]]; do
        case "$1" in
        --help)
            show_help
            exit 0
            ;;
        --raw)
            RAW_OUTPUT=true
            shift
            ;;
        --plain)
            PLAIN_MODE=true
            shift
            ;;
        -v | --verbose)
            VERBOSE=true
            shift
            ;;
        -c)
            if [[ -z "$2" ]]; then
                echo "Error: -c option requires a config file argument" >&2
                exit 1
            fi
            if [[ ! -f "$2" ]]; then
                echo "Error: Config file '$2' does not exist" >&2
                exit 1
            fi
            CUSTOM_CONFIG="$2"
            shift 2
            ;;
        -*)
            echo "Error: Unknown option $1" >&2
            echo "Use --help for usage information" >&2
            exit 1
            ;;
        *)
            # First non-option argument is the command
            break
            ;;
        esac
    done

    if [[ $# -eq 0 ]]; then
        echo "Error: No command specified" >&2
        exit 1
    fi

    CMD_NAME="$1"
    # Try to resolve alias first, fallback to wslpath conversion
    CMD=$(resolve_alias "$CMD_NAME")
    ALIAS_OPTIONS=$(get_alias_options "$CMD_NAME")
    if [[ "$CMD" == "$CMD_NAME" ]]; then
        # No alias found, convert path if it's a file
        if [[ -f "$CMD_NAME" || -d "$CMD_NAME" ]]; then
            CMD="$(wslpath -w "$1")"
        else
            CMD="$1"
        fi
    fi
    shift                  # Remove the command itself
    ARGS_TO_PROCESS=("$@") # Remaining are arguments to the command
fi

# Add alias options first if they exist
if [[ -n "$ALIAS_OPTIONS" ]]; then
    # Split alias options by spaces and process each for path conversion
    IFS=' ' read -ra ALIAS_OPTS <<<"$ALIAS_OPTIONS"
    for opt in "${ALIAS_OPTS[@]}"; do
        # Apply the same path conversion logic as regular arguments
        if [[ "$PLAIN_MODE" = false && (-f "$opt" || -d "$opt") ]]; then
            # Convert file/directory paths to Windows format
            CMDARGS+=("$(wslpath -w "$opt")")
        else
            CMDARGS+=("$opt")
        fi
    done
fi

# Process arguments for path conversion
for i in "${ARGS_TO_PROCESS[@]}"; do
    if [[ "$PLAIN_MODE" = false ]]; then
        # Check if argument should be converted to Windows path:
        # 1. File or directory exists
        # 2. Looks like a path (contains / or starts with ~, ., /)
        # 3. Parent directory exists (for new file creation)
        if [[ -f "$i" || -d "$i" ]]; then
            # Resolve to physical path before converting
            physical_path=$(readlink -f "$i")
            CMDARGS+=("$(wslpath -w "${physical_path}")")
        elif [[ "$i" == /* || "$i" == ~* || "$i" == ./* || "$i" == ../* || "$i" == */* ]]; then
            # Looks like a path - check if parent directory exists
            parent_dir=$(dirname "$i")
            if [[ -d "$parent_dir" ]]; then
                # Resolve parent to physical path, then append filename
                physical_parent=$(readlink -f "$parent_dir")
                filename=$(basename "$i")
                physical_path="${physical_parent}/${filename}"
                CMDARGS+=("$(wslpath -w "${physical_path}")")
            else
                CMDARGS+=("${i}")
            fi
        else
            CMDARGS+=("${i}")
        fi
    else
        CMDARGS+=("${i}")
    fi
done

# Debug/Logging
if [[ -n "${WSLUTIL_DEBUG:-}" ]]; then
    mkdir -p ${HOME}/.local/state/wslutil
    FLAGS_LOG=""
    if [ "$RAW_OUTPUT" = true ]; then
        FLAGS_LOG+="--raw "
    fi
    if [ "$PLAIN_MODE" = true ]; then
        FLAGS_LOG+="--plain "
    fi
    ALIAS_LOG=""
    if [[ "$CMD" != "$CMD_NAME" ]]; then
        ALIAS_LOG="(alias: $CMD_NAME -> $CMD) "
    fi
    echo "win-run ${FLAGS_LOG}${ALIAS_LOG}${SYM}${CMD} ${CMDARGS[@]}" >>${HOME}/.local/state/wslutil/win-run.log
fi

set -euo pipefail
if [ "$RAW_OUTPUT" = true ]; then
    PS_CMD="& \"${CMD}\" ${CMDARGS[@]}"
    if [ "$VERBOSE" = true ]; then
        echo "+ $POWERSHELL_EXE -NoProfile -Command \"$PS_CMD\"" >&2
    fi
    "$POWERSHELL_EXE" -NoProfile -Command "$PS_CMD"
else
    PS_CMD="[Console]::OutputEncoding = [System.Text.Encoding]::UTF8; \$OutputEncoding = [System.Text.Encoding]::UTF8; & \"${CMD}\" ${CMDARGS[@]}"
    if [ "$VERBOSE" = true ]; then
        echo "+ $POWERSHELL_EXE -NoProfile -Command \"$PS_CMD\"" >&2
    fi
    "$POWERSHELL_EXE" -NoProfile -Command "$PS_CMD" | ensure_utf8
fi
