#!/usr/bin/env bash
#
# ┌───────────────────────────────────────────────────────────┐
# │                       WSLUTIL                             │
# │                                                           │
# │    ██████╗  ██████╗  ██████╗████████╗ ██████╗ ██████╗     │
# │    ██╔══██╗██╔═══██╗██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗    │
# │    ██║  ██║██║   ██║██║        ██║   ██║   ██║██████╔╝    │
# │    ██║  ██║██║   ██║██║        ██║   ██║   ██║██╔══██╗    │
# │    ██████╔╝╚██████╔╝╚██████╗   ██║   ╚██████╔╝██║  ██║    │
# │    ╚═════╝  ╚═════╝  ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝    │
# │                                                           │
# └───────────────────────────────────────────────────────────┘
# wslutil-doctor - Diagnose the health of wslutil's environment

# Colors and symbols
GREEN='\033[0;32m'
RED='\033[0;31m'
RESET='\033[0m'
CHECK="${GREEN}✓${RESET}"
CROSS="${RED}✗${RESET}"

# Command checks (full paths)
REQUIRED_COMMANDS=(
    "/usr/bin/wl-copy"
    "/usr/bin/wl-paste"
    "/usr/bin/wayland-info"
    "/usr/bin/crudini"
    "/usr/sbin/update-binfmts"
    "/usr/bin/dos2unix"
    "/usr/bin/dconf"
)
# We will use dpkg -S later, so PACKAGE_MAP is no longer needed.

# File checks
REQUIRED_FILES=(
    "/etc/wsl.conf"
    "/usr/lib/binfmt.d/WSLInterop.conf"
)

printf "\nwslutil doctor\n\n"

###  Required Commands
printf "== Required Commands ==\n"
MISSING_COMMANDS=0
declare -A MISSING_COMMAND_PATHS # Store missing paths for later dpkg lookup
for cmd_path in "${REQUIRED_COMMANDS[@]}"; do
    printf "["
    if [ -x "$cmd_path" ]; then
        printf "$CHECK"
        status="found"
    else
        printf "$CROSS"
        status="missing"
        ((MISSING_COMMANDS++))
        MISSING_COMMAND_PATHS["$cmd_path"]=1 # Mark path as missing
    fi
    printf "] %s\n" "$cmd_path"
done
printf "\n"

### Environment Checks
printf "== Environment ==\n"
WSL_OK=false
WSLUTIL_OK=false
WIN_USERPROFILE_OK=false
WIN_WINDIR_OK=false

# Check for WSL environment
printf "["
if grep -qi microsoft /proc/version 2>/dev/null; then
    printf "$CHECK"
    WSL_OK=true
else
    printf "$CROSS"
fi
printf "] %s\n" "WSL environment"

# Check if wslutil is in PATH
printf "["
if command -v wslutil >/dev/null 2>&1; then
    printf "$CHECK"
    WSLUTIL_OK=true
else
    printf "$CROSS"
fi
printf "] %s\n" "wslutil in PATH"

# Check for WIN_USERPROFILE
printf "["
if [ -n "$WIN_USERPROFILE" ]; then
    printf "$CHECK"
    WIN_USERPROFILE_OK=true
else
    printf "$CROSS"
fi
printf "] %s\n" "WIN_USERPROFILE set"

# Check for WIN_WINDIR
printf "["
if [ -n "$WIN_WINDIR" ]; then
    printf "$CHECK"
    WIN_WINDIR_OK=true
else
    printf "$CROSS"
fi
printf "] %s\n" "WIN_WINDIR set"
printf "\n"

###  File Presence Checks
printf "== Required Files ==\n"
MISSING_FILES=0
for file in "${REQUIRED_FILES[@]}"; do
    printf "["
    if [ -e "$file" ]; then
        printf "$CHECK"
        status="present"
    else
        printf "$CROSS"
        status="missing"
        ((MISSING_FILES++))
    fi
    printf "] %s\n" "$file"
done
printf "\n"

###  File Content Checks (Warnings Only)
WARNINGS=0
FILE_CONTENT_PASSED=0

# Only run content checks if crudini is available
if command -v crudini >/dev/null 2>&1; then
    printf "== File Content Checks ==\n"
    if [ -e "/etc/wsl.conf" ]; then
        for section in boot user; do
            printf "["
            if crudini --get /etc/wsl.conf "$section" &>/dev/null; then
                printf "$CHECK"
                status="found"
                ((FILE_CONTENT_PASSED++))
            else
                printf "$CROSS"
                status="missing (warn)"
                ((WARNINGS++))
            fi
            printf "] [wsl.conf] %s\n" "section [$section]"
        done
    else
        printf "[${CROSS}] /etc/wsl.conf not found — skipping content checks\n"
        # No need to increment WARNINGS here, as missing file is already an error
    fi
    printf "\n"
fi
# End of crudini check block


# Helper function to get installation suggestion based on package manager
get_install_suggestion() {
    local cmd_path="$1"
    local pkg_manager=""
    local install_cmd=""
    local pkg_name=""

    # Detect package manager
    if command -v dpkg &>/dev/null; then
        pkg_manager="dpkg"
        install_cmd="sudo apt install"
    elif command -v rpm &>/dev/null; then
        pkg_manager="rpm"
        # Prefer dnf if available, otherwise use yum
        if command -v dnf &>/dev/null; then
            install_cmd="sudo dnf install"
        elif command -v yum &>/dev/null; then
            install_cmd="sudo yum install"
        else
            install_cmd="package manager (dnf/yum)" # Fallback message
        fi
    fi

    # Find package name based on manager
    if [ "$pkg_manager" == "dpkg" ]; then
        pkg_info=$(dpkg -S "$cmd_path" 2>/dev/null)
        if [ -n "$pkg_info" ]; then
            pkg_name=$(echo "$pkg_info" | cut -d':' -f1)
        fi
    elif [ "$pkg_manager" == "rpm" ]; then
        pkg_name=$(rpm -qf "$cmd_path" 2>/dev/null)
        # rpm -qf might return "file /path/to/file is not owned by any package"
        if [[ "$pkg_name" == *"not owned by any package"* ]] || [ -z "$pkg_name" ]; then
            pkg_name="" # Reset if not found or error message
        fi
    fi

    # Output suggestion
    if [ -n "$pkg_name" ] && [ -n "$install_cmd" ]; then
        printf "  → For %-25s: %s %s\n" "$cmd_path" "$install_cmd" "$pkg_name"
    elif [ -n "$pkg_manager" ]; then
        printf "  → For %-25s: Could not determine package via %s (try searching?)\n" "$cmd_path" "$pkg_manager"
    else
        printf "  → For %-25s: Could not determine package (unknown package manager)\n" "$cmd_path"
    fi
}


###  Summary
TOTAL_MISSING=$((MISSING_COMMANDS + MISSING_FILES))
ENV_OK=$($WSL_OK && $WSLUTIL_OK && $WIN_USERPROFILE_OK && $WIN_WINDIR_OK && echo true || echo false)

if [ "$TOTAL_MISSING" -eq 0 ] && [ "$WARNINGS" -eq 0 ] && $ENV_OK; then
    printf "${GREEN}All checks passed. wslutil environment looks good!${RESET}\n\n"
else
    [ "$TOTAL_MISSING" -gt 0 ] && printf "${RED}%d issue(s) detected.${RESET}\n" "$TOTAL_MISSING"
    [ "$WARNINGS" -gt 0 ] && printf "${RED}%d warning(s) issued.${RESET}\n" "$WARNINGS"

    if [ "$MISSING_COMMANDS" -gt 0 ]; then
        printf "\nMissing commands and install suggestions:\n"
        for cmd_path in "${!MISSING_COMMAND_PATHS[@]}"; do
            get_install_suggestion "$cmd_path"
        done
    fi
    if ! $WSLUTIL_OK; then
        printf "\n${RED}Tip:${RESET} 'wslutil' is not in your PATH. Make sure it's installed and added to ~/.local/bin or another directory in your PATH.\n"
    fi
    if ! $WIN_USERPROFILE_OK || ! $WIN_WINDIR_OK; then
        printf "\n${RED}Tip:${RESET} Windows environment variables (WIN_USERPROFILE, WIN_WINDIR) missing. Run:\n"
        printf "  ${GREEN}eval \"\$(wslutil shellenv)\"${RESET}\n"
        printf "  and add it to your shell's startup file (e.g., ~/.bashrc, ~/.zshrc).\n"
    fi
    if [ "$FILE_CONTENT_PASSED" -gt 0 ] || [ "$WARNINGS" -gt 0 ]; then
        printf "\n${GREEN}Tip:${RESET} Your /etc/wsl.conf may need setup or cleanup. You can run:\n"
        printf "  ${GREEN}sudo wslutil init${RESET}\n"
    fi
    printf "\n"
fi
