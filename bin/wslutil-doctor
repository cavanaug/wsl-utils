#!/usr/bin/bash
#
# ┌───────────────────────────────────────────────────────────┐
# │                       WSLUTIL                             │
# │                                                           │
# │    ██████╗  ██████╗  ██████╗████████╗ ██████╗ ██████╗     │
# │    ██╔══██╗██╔═══██╗██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗    │
# │    ██║  ██║██║   ██║██║        ██║   ██║   ██║██████╔╝    │
# │    ██║  ██║██║   ██║██║        ██║   ██║   ██║██╔══██╗    │
# │    ██████╔╝╚██████╔╝╚██████╗   ██║   ╚██████╔╝██║  ██║    │
# │    ╚═════╝  ╚═════╝  ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝    │
# │                                                           │
# └───────────────────────────────────────────────────────────┘
# wslutil-doctor - Diagnose the health of wslutil's environment

show_help() {
    cat <<EOF
Usage: wslutil-doctor [OPTIONS]

Diagnose the health of wslutil's environment and detect configuration issues.

Options:
  --autofix    Automatically fix detected issues where possible
  --help       Show this help message and exit

Examples:
  wslutil-doctor                 # Run diagnostic checks
  wslutil-doctor --autofix       # Run checks and attempt automatic fixes
  wslutil-doctor --help          # Show this help message

EOF
}

# Parse command line arguments
AUTOFIX=0
while [[ $# -gt 0 ]]; do
    case $1 in
    --autofix)
        AUTOFIX=1
        shift
        echo "Autofix is still TBD"
        exit 1
        ;;
    --help)
        show_help
        exit 0
        ;;
    *)
        echo "Unknown option: $1"
        show_help
        exit 1
        ;;
    esac
done

# Colors and symbols
# ANSI color codes for styling the output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
RESET='\033[0m'
CHECK="${GREEN}✓${RESET}"
CROSS="${RED}✗${RESET}"

# Return which argument (1 or 2) is largest, or 0 if they are equal
compare_versions() {
    if [[ "$1" == "$2" ]]; then return 0; fi
    local lowest=$(printf '%s\n' "$1" "$2" | sort -V | head -n 1)
    if [[ "$1" == "$lowest" ]]; then return 2; else return 1; fi
}

check_command() {
    local action="$1" # check or fix
    local command="$2"
    local -n response="$3"
    if [ -x "${command}" ]; then
        return 0
    fi
    package_name=$(apt-file search "${command}" 2>/dev/null | grep -E '^[^:]+:' | cut -d':' -f1 | head -n1)
    if [ -z "${package_name}" ]; then
        response+="# ${command} required, but not found in package database\n"
    else
        response+="# ${command} required, install package ${package_name}\n"
        if [ "${action}" == "fix" ]; then
            response+="sudo apt install ${package_name}\n"
        fi
    fi
    return 1
}

# Command checks (full paths)
REQUIRED_COMMANDS=(
    "/usr/bin/crudini"
    "/usr/bin/yq"
    "/usr/bin/wl-copy"
    "/usr/bin/wayland-info"
    "/usr/sbin/update-binfmts"
    "/usr/bin/dos2unix"
    "/usr/bin/dconf"
)
# We will use apt-file later, so PACKAGE_MAP is no longer needed.

# File checks
REQUIRED_FILES=(
    "/etc/wsl.conf"
    "/usr/lib/binfmt.d/WSLInterop.conf"
)

# Windows profile files (constructed dynamically)
WINDOWS_FILES=()

# Symlink checks
REQUIRED_SYMLINKS=(
)

# Track missing symlinks for suggestions
declare -A MISSING_SYMLINK_PATHS

printf "${YELLOW}"
printf "\n"
printf "█   █ ▄▀▀▀▀ █     █   █ ▀▀█▀▀ ▀▀█▀▀ █           █▀▀▀▄ █▀▀▀▄ \n"
printf "█ █ █  ▀▀▀▄ █     █   █   █     █   █           █   █ █▀▀▀▄ \n"
printf " ▀ ▀  ▀▀▀▀  ▀▀▀▀▀  ▀▀▀    ▀   ▀▀▀▀▀ ▀▀▀▀▀       ▀▀▀▀  ▀   ▀ \n"
printf "${RESET}"

###  Initialize
printf "\n${BLUE}=====  %-20s  =====${RESET}\n" "Essential Prerequisites"

# Check for WSL environment
if grep -qi microsoft /proc/version 2>/dev/null; then
    printf "[$CHECK] %s\n" "WSL environment"
else
    printf "[$CROSS] %s\n" "WSL environment"
    exit
fi

# Check WSL version (requires 2.5.8.0 or higher)
wsl_version=$(wslinfo --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)
if [[ -n "$wsl_version" ]]; then
    # Parse version numbers for comparison
    IFS='.' read -ra version_parts <<< "$wsl_version"
    major=${version_parts[0]:-0}
    minor=${version_parts[1]:-0}
    build=${version_parts[2]:-0}
    revision=${version_parts[3]:-0}
    
    # Check if version is >= 2.5.8.0
    if (( major > 2 || (major == 2 && minor > 5) || (major == 2 && minor == 5 && build >= 8) )); then
        printf "[$CHECK] WSL version: %s\n" "$wsl_version"
    else
        printf "[$CROSS] WSL version: %s (requires 2.5.8.0 or higher)\n" "$wsl_version"
        printf "    # Update WSL to latest version:\n"
        printf "    wsl.exe --update\n"
    fi
else
    printf "[$CROSS] WSL version: could not determine (wslinfo command not available)\n"
    printf "    # Update WSL to latest version:\n"
    printf "    wsl.exe --update\n"
fi

# Check for OS package manager search utility
if command -v dpkg &>/dev/null; then
    pkg_manager="dpkg"
    install_cmd="sudo apt install"
    if command -v apt-file &>/dev/null; then
        printf "[$CHECK] %s\n" "OS package manager search utility"
    else
        printf "[$CROSS] %s\n" "OS package manager search utility"
        printf "    # ESSENTIAL Debian/Ubuntu prerequisite missing\n    sudo apt install apt-file\n"
        exit 1
    fi
elif command -v rpm &>/dev/null; then
    pkg_manager="rpm"
    # Prefer dnf if available, otherwise use yum
    printf "[$CROSS] %s\n" "OS package manager search utility\n"
    printf "    # RPM based distros not presently supported for package search\n"
    printf "    #    Pull requests welcomed...\n"
else
    printf "[$CROSS] %s\n" "OS package manager search utility\n"
    printf "    # Distro not presently supported for package search\n"
    printf "    #    Pull requests welcomed...\n"
fi

###  Required Commands
printf "\n${BLUE}=====  %-20s  =====${RESET}\n" "Required Commands"
MISSING_COMMANDS=0
declare -A MISSING_COMMAND_PATHS # Store missing paths for later dpkg lookup
for cmd_path in "${REQUIRED_COMMANDS[@]}"; do
    printf "["
    if [ -x "$cmd_path" ]; then
        printf "$CHECK"
        status="found"
    else
        printf "$CROSS"
        status="missing"
        ((MISSING_COMMANDS++))
        MISSING_COMMAND_PATHS["$cmd_path"]=1 # Mark path as missing
    fi
    printf "] %s\n" "$cmd_path"
done

### Environment Checks
printf "\n${BLUE}=====  %-20s  =====${RESET}\n" "Environment Checks"
WSL_OK=false
WSLUTIL_OK=false
WIN_USERPROFILE_OK=false
WIN_WINDIR_OK=false

# Check if wslutil is in PATH
printf "["
if command -v wslutil >/dev/null 2>&1; then
    printf "$CHECK"
    WSLUTIL_OK=true
else
    printf "$CROSS"
fi
printf "] %s\n" "wslutil in PATH"

# Check for WIN_USERPROFILE
printf "["
if [ -n "$WIN_USERPROFILE" ]; then
    printf "$CHECK"
    WIN_USERPROFILE_OK=true
else
    printf "$CROSS"
fi
printf "] %s\n" "WIN_USERPROFILE set"

# Check for WIN_WINDIR
printf "["
if [ -n "$WIN_WINDIR" ]; then
    printf "$CHECK"
    WIN_WINDIR_OK=true
else
    printf "$CROSS"
fi
printf "] %s\n" "WIN_WINDIR set"

###  File Presence Checks
printf "\n${BLUE}=====  %-20s  =====${RESET}\n" "Required Files"
MISSING_FILES=0
for file in "${REQUIRED_FILES[@]}"; do
    printf "["
    if [ -e "$file" ]; then
        printf "$CHECK"
        status="present"
    else
        printf "$CROSS"
        status="missing"
        ((MISSING_FILES++))
    fi
    printf "] %s\n" "$file"
done

# Check symlinks
MISSING_SYMLINKS=0
for symlink_spec in "${REQUIRED_SYMLINKS[@]}"; do
    IFS=':' read -r symlink_path target_path <<<"$symlink_spec"
    printf "["
    if [ -L "$symlink_path" ]; then
        resolved_path=$(readlink -f "$symlink_path")
        expected_path=$(readlink -f "$target_path")
        if [ "$resolved_path" = "$expected_path" ]; then
            printf "$CHECK"
            status="correct symlink"
        else
            printf "$CROSS"
            status="incorrect symlink target"
            ((MISSING_FILES++))
            ((MISSING_SYMLINKS++))
            MISSING_SYMLINK_PATHS["$symlink_spec"]=1
        fi
    else
        printf "$CROSS"
        status="missing symlink"
        ((MISSING_FILES++))
        ((MISSING_SYMLINKS++))
        MISSING_SYMLINK_PATHS["$symlink_spec"]=1
    fi
    printf "] %s -> %s\n" "$symlink_path" "$target_path"
done

###  Windows Configuration Files
# Build Windows files array if WIN_USERPROFILE is available
if [[ -n "$WIN_USERPROFILE" ]]; then
    WINDOWS_FILES=(
        "$WIN_USERPROFILE/.wslconfig"
        "$WIN_USERPROFILE/.wslgconfig"
    )
    
    printf "\n${BLUE}=====  %-20s  =====${RESET}\n" "Windows Config Files"
    for file in "${WINDOWS_FILES[@]}"; do
        printf "["
        if [ -e "$file" ]; then
            printf "$CHECK"
            status="present"
        else
            printf "$CROSS"
            status="missing"
            ((MISSING_FILES++))
        fi
        printf "] %s\n" "$file"
    done
else
    printf "\n${BLUE}=====  %-20s  =====${RESET}\n" "Windows Config Files"
    printf "[$CROSS] Skipped - WIN_USERPROFILE not available\n"
fi

###  File Content Checks (Warnings Only)
WARNINGS=0
FILE_CONTENT_PASSED=0

# Only run content checks if crudini is available
if command -v crudini >/dev/null 2>&1; then
    printf "\n${BLUE}=====  %-20s  =====${RESET}\n" "File Content Checks"
    if [ -e "/etc/wsl.conf" ]; then
        for section in boot user interop; do
            printf "["
            if crudini --get /etc/wsl.conf "$section" &>/dev/null; then
                printf "$CHECK"
                status="found"
                ((FILE_CONTENT_PASSED++))
            else
                printf "$CROSS"
                status="missing (warn)"
                ((WARNINGS++))
            fi
            printf "] [wsl.conf] %s\n" "section [$section]"
        done
    else
        printf "[${CROSS}] /etc/wsl.conf not found — skipping content checks\n"
        # No need to increment WARNINGS here, as missing file is already an error
    fi
    
    # Check Windows configuration files content
    if [[ -n "$WIN_USERPROFILE" ]]; then
        # Check .wslconfig sections
        if [ -e "$WIN_USERPROFILE/.wslconfig" ]; then
            for section in wsl2 experimental; do
                printf "["
                if crudini --get "$WIN_USERPROFILE/.wslconfig" "$section" &>/dev/null; then
                    printf "$CHECK"
                    status="found"
                    ((FILE_CONTENT_PASSED++))
                else
                    printf "$CROSS"
                    status="missing (warn)"
                    ((WARNINGS++))
                fi
                printf "] [.wslconfig] %s\n" "section [$section]"
            done
        else
            printf "[${CROSS}] .wslconfig not found — skipping content checks\n"
        fi
        
        # Check .wslgconfig sections
        if [ -e "$WIN_USERPROFILE/.wslgconfig" ]; then
            for section in system-distro-env; do
                printf "["
                if crudini --get "$WIN_USERPROFILE/.wslgconfig" "$section" &>/dev/null; then
                    printf "$CHECK"
                    status="found"
                    ((FILE_CONTENT_PASSED++))
                else
                    printf "$CROSS"
                    status="missing (warn)"
                    ((WARNINGS++))
                fi
                printf "] [.wslgconfig] %s\n" "section [$section]"
            done
        else
            printf "[${CROSS}] .wslgconfig not found — skipping content checks\n"
        fi
    else
        printf "[${CROSS}] WIN_USERPROFILE not available — skipping Windows file content checks\n"
    fi
    
    printf "\n"
fi
# End of crudini check block

# Helper function to get installation suggestion based on package manager
get_install_suggestion() {
    local cmd_path="$1"
    local pkg_manager=""
    local install_cmd=""
    local pkg_name=""

    # Detect package manager
    if command -v dpkg &>/dev/null; then
        pkg_manager="dpkg"
        install_cmd="sudo apt install"
        search_cmd="apt-file -F search"
    elif command -v rpm &>/dev/null; then
        pkg_manager="rpm"
        # Prefer dnf if available, otherwise use yum
        if command -v dnf &>/dev/null; then
            install_cmd="sudo dnf install"
        elif command -v yum &>/dev/null; then
            install_cmd="sudo yum install"
        else
            install_cmd="package manager (dnf/yum)" # Fallback message
        fi
    fi

    # Find package name based on manager
    if [ "$pkg_manager" == "dpkg" ]; then
        pkg_info=$($search_cmd "$cmd_path" 2>/dev/null)
        if [ -n "$pkg_info" ]; then
            pkg_name=$(echo "$pkg_info" | cut -d':' -f1)
        fi
    elif [ "$pkg_manager" == "rpm" ]; then
        pkg_name=$(rpm -qf "$cmd_path" 2>/dev/null)
        # rpm -qf might return "file /path/to/file is not owned by any package"
        if [[ "$pkg_name" == *"not owned by any package"* ]] || [ -z "$pkg_name" ]; then
            pkg_name="" # Reset if not found or error message
        fi
    fi

    # Output suggestion
    if [ -n "$pkg_name" ] && [ -n "$install_cmd" ]; then
        #printf "  → For %-25s: %s %s\n" "$cmd_path" "$install_cmd" "$pkg_name"
        printf "  # Fix missing %s\n   %s %s\n" "$cmd_path" "$install_cmd" "$pkg_name"
    elif [ -n "$pkg_manager" ]; then
        #printf "  → For %-25s: Could not determine package via %s (try searching?)\n" "$cmd_path" "$pkg_manager"
        printf "  # Fix missing %s: Could not determine package via %s (try searching?)\n" "$cmd_path" "$pkg_manager"
    else
        #printf "  → For %-25s: Could not determine package (unknown package manager)\n" "$cmd_path"
        printf "  # Fix missing %s: Could not determine package (unknown package manager)\n" "$cmd_path"
    fi
}

###  Summary
TOTAL_MISSING=$((MISSING_COMMANDS + MISSING_FILES))
ENV_OK=$($WSL_OK && $WSLUTIL_OK && $WIN_USERPROFILE_OK && $WIN_WINDIR_OK && echo true || echo false)

if [ "$TOTAL_MISSING" -eq 0 ] && [ "$WARNINGS" -eq 0 ] && $ENV_OK; then
    printf "${GREEN}All checks passed. wslutil environment looks good!${RESET}\n\n"
else
    [ "$TOTAL_MISSING" -gt 0 ] && printf "${RED}%d issue(s) detected.${RESET}\n" "$TOTAL_MISSING"
    [ "$WARNINGS" -gt 0 ] && printf "${RED}%d warning(s) issued.${RESET}\n" "$WARNINGS"

    if [ "$MISSING_COMMANDS" -gt 0 ]; then
        printf "\nMissing commands and install suggestions:\n"

        for cmd_path in "${!MISSING_COMMAND_PATHS[@]}"; do
            get_install_suggestion "$cmd_path"
        done
    fi
    if [ "$MISSING_SYMLINKS" -gt 0 ]; then
        printf "\nMissing symlinks and fix suggestions:\n"
        for symlink_spec in "${!MISSING_SYMLINK_PATHS[@]}"; do
            IFS=':' read -r symlink_path target_path <<<"$symlink_spec"
            printf "  # Fix missing symlink %s -> %s\n" "$symlink_path" "$target_path"
            printf "   sudo rm -rf %s\n" "$symlink_path"
            printf "   sudo ln -sf %s %s\n" "$target_path" "$symlink_path"
        done
    fi
    if ! $WSLUTIL_OK; then
        printf "\n  # ${RED}Tip:${RESET} 'wslutil' is not in your PATH. Make sure it's installed and added to ~/.local/bin or another directory in your PATH.\n"
    fi
    if ! $WIN_USERPROFILE_OK || ! $WIN_WINDIR_OK; then
        printf "\n  # ${RED}Tip:${RESET} Windows environment variables (WIN_USERPROFILE, WIN_WINDIR) missing. Run:\n"
        printf "  ${GREEN}eval \"\$(wslutil shellenv)\"${RESET}\n"
        printf "  and add it to your shell's startup file (e.g., ~/.bashrc, ~/.zshrc).\n"
    fi
    if [ "$FILE_CONTENT_PASSED" -gt 0 ] || [ "$WARNINGS" -gt 0 ]; then
        printf "\n  # ${GREEN}Tip:${RESET} Your /etc/wsl.conf may need setup or cleanup. You can run:\n"
        printf "  ${GREEN}wslutil setup${RESET}\n"
    fi
    printf "\n"
fi

###  Version Check
printf "\n${BLUE}=====  %-20s  =====${RESET}\n" "WSL-Utils Version Info"

# Get local version
WSLUTIL_DIR="$(dirname $(dirname "$0"))"
if [[ -d "${WSLUTIL_DIR}/.git" ]]; then
    cd "${WSLUTIL_DIR}"
    local_date=$(git log -1 --format="%cd" --date=format:"%Y.%m.%d" 2>/dev/null)
    local_hash=$(git log -1 --format="%h" 2>/dev/null)

    # Check for local changes
    local_changes=""
    if ! git diff --quiet 2>/dev/null || ! git diff --cached --quiet 2>/dev/null; then
        local_changes=" (modified)"
    elif [[ -n "$(git ls-files --others --exclude-standard 2>/dev/null)" ]]; then
        local_changes=" (untracked files)"
    fi

    if [[ -n "$local_date" && -n "$local_hash" ]]; then
        local_version="${local_date} (${local_hash})${local_changes}"
        printf "[$CHECK] Local version: %s\n" "$local_version"

        # Check if we need to fetch (if last fetch was > 1 hour ago)
        need_fetch=false
        if [[ -f ".git/FETCH_HEAD" ]]; then
            last_fetch=$(stat -c %Y .git/FETCH_HEAD 2>/dev/null)
            current_time=$(date +%s)
            if [[ -n "$last_fetch" ]] && [[ $((current_time - last_fetch)) -gt 3600 ]]; then
                need_fetch=true
            fi
        else
            # No previous fetch, need to fetch
            need_fetch=true
        fi

        # Perform fetch if needed
        if [[ "$need_fetch" == "true" ]]; then
            if timeout 10 git fetch origin main --quiet 2>/dev/null; then
                printf "[$CHECK] Remote info refreshed\n"
            else
                printf "[$CROSS] Remote fetch failed or timed out\n"
            fi
        fi

        # Get remote version from local refs (fast, no network)
        if git rev-parse origin/main >/dev/null 2>&1; then
            remote_hash_full=$(git rev-parse origin/main 2>/dev/null)
            remote_hash=$(echo "$remote_hash_full" | cut -c1-7)
            remote_date=$(git log -1 --format="%cd" --date=format:"%Y.%m.%d" origin/main 2>/dev/null)

            if [[ -n "$remote_date" ]]; then
                remote_version="${remote_date} (${remote_hash})"
                printf "[$CHECK] Remote version: %s\n" "$remote_version"
            else
                printf "[$CHECK] Remote hash: %s\n" "$remote_hash"
            fi

            # Compare versions
            if [[ "$local_hash" == "$remote_hash" ]]; then
                if [[ -n "$local_changes" ]]; then
                    printf "[${YELLOW}!${RESET}] Version status: up to date${local_changes}\n"
                else
                    printf "[$CHECK] Version status: up to date\n"
                fi
            else
                # Check if local is ahead, behind, or diverged
                local_full_hash=$(git rev-parse HEAD 2>/dev/null)
                remote_full_hash=$(git rev-parse origin/main 2>/dev/null)

                # Check if local commit is ancestor of remote (behind)
                if git merge-base --is-ancestor "$local_full_hash" "$remote_full_hash" 2>/dev/null; then
                    printf "[$CROSS] Version status: behind remote (update available)\n"
                    printf "    # Update to latest version:\n"
                    printf "    wslutil upgrade\n"
                # Check if remote commit is ancestor of local (ahead)
                elif git merge-base --is-ancestor "$remote_full_hash" "$local_full_hash" 2>/dev/null; then
                    printf "[${YELLOW}!${RESET}] Version status: ahead of remote (local development)\n"
                else
                    # Branches have diverged
                    printf "[${YELLOW}!${RESET}] Version status: diverged from remote (local changes)\n"
                    if [[ -z "$local_changes" ]]; then
                        printf "    # Note: Local commits differ from remote\n"
                    fi
                fi
            fi
        else
            printf "[$CROSS] Remote version: no cached remote info (run 'git fetch' manually)\n"
        fi
    else
        printf "[$CROSS] Local version: could not determine from git\n"
    fi
else
    printf "[$CROSS] Version check: not a git repository\n"
fi

printf "\n"
