#!/bin/bash
#  ┌───────────────────────────────────────────────────────────────┐
#  │                                                               │
#  │    ██╗    ██╗███████╗██╗     ██╗   ██╗████████╗██╗██╗         │
#  │    ██║    ██║██╔════╝██║     ██║   ██║╚══██╔══╝██║██║         │
#  │    ██║ █╗ ██║███████╗██║     ██║   ██║   ██║   ██║██║         │
#  │    ██║███╗██║╚════██║██║     ██║   ██║   ██║   ██║██║         │
#  │    ╚███╔███╔╝███████║███████╗╚██████╔╝   ██║   ██║███████╗    │
#  │     ╚══╝╚══╝ ╚══════╝╚══════╝ ╚═════╝    ╚═╝   ╚═╝╚══════╝    │
#  │                                                               │
#  └───────────────────────────────────────────────────────────────┘
# wslutil - Windows Subsystem for Linux utility
#

# Function to handle 'shellenv' subcommand
shellenv_command() {
    # Add argument processing for 'shellenv' here
    SHELLENV=$(basename $SHELL)
    if [[ -f "${WSLUTIL_DIR}/env/shellenv.${SHELLENV}" ]]; then
        echo "WSLUTIL_DIR=${WSLUTIL_DIR}"
        cat "${WSLUTIL_DIR}/env/shellenv.${SHELLENV}"
    else
        echo "ERROR: Shellenv file not found for ${SHELLENV}" >&2
        exit 1
    fi
}

# Function to handle 'register' subcommand
register_command() {
    echo "Registering WSL utility..."
    # Add argument processing for 'register' here
    while [[ $# -gt 0 ]]; do
        case "$1" in
        --name)
            shift
            echo "Registering with name: $1"
            ;;
        *)
            echo "Unknown option for register: $1" >/dev/null
            exit 1
            ;;
        esac
        shift
    done
}

# Function to handle 'upgrade' subcommand
upgrade_command() {
    echo "Updating WSL utility..."
    # Add argument processing for 'upgrade' here
    while [[ $# -gt 0 ]]; do
        case "$1" in
        --fetch)
            echo "Fetch but dont apply upgrades."
            (cd $WSLUTIL_DIR && git fetch)
            exit 0
            ;;
        *)
            echo "Unknown option for upgrade: $1" >/dev/null
            exit 1
            ;;
        esac
        shift
    done
    (cd $WSLUTIL_DIR && git pull)
}

# SHould make this a test if environment variable is set but doesnt match the the grandparent then error out.
# WSLUTIL_DIR=${WSLUTIL_DIR:-${HOME}/.wslutil}
WSLUTIL_DIR="$(dirname $(dirname "$0"))"

# Parse CLI arguments and dispatch to subcommands
case "$1" in
shellenv)
    if [[ "$2" == "--help" ]]; then
        echo "Usage: $(basename $0) shellenv"
        exit 0
    fi
    shift
    shellenv_command "$@"
    ;;
register)
    if [[ "$2" == "--help" ]]; then
        echo "Usage: $(basename $0) register --name <name>"
        echo "  --name     Specify the name for registration"
        exit 0
    fi
    shift
    register_command "$@"
    ;;
upgrade)
    if [[ "$2" == "--help" ]]; then
        echo "Usage: $(basename $0) upgrade [--check]"
        echo "  --check    Check for upgrades"
        exit 0
    fi
    shift
    upgrade_command "$@"
    exit 0 # Exit after upgrade command regardless of WSL check
    ;;
--help)
    echo "Usage: $(basename $0) {shellenv|register|upgrade} [options]"
    echo "Subcommands:"
    echo "  doctor     Run a health check on the wslutil environment"
    echo "  shellenv   Setup the shell environment (eval the output)"
    echo "  shim       Create/Update windows command shims in the wsutil bin directory"
    echo "  setup      Setup & Configure system environment for wslutil (utilizes sudo)"
    echo "  upgrade    Upgrade the wslutil in place"
    if extras="$(compgen -c | grep '^wslutil-' | cut -f2 -d- | grep -E -v '(doctor|shellenv|shim|setup|upgrade)')"; then
        printf "\nExtra Subcommands:\n"
        for i in $extras; do
            echo "  $i (as wslutil-$i)"
        done
    fi
    exit 0
    ;;
*)
    # Check if running within WSL by inspecting the environment
    # This check is bypassed for 'upgrade', '--help', and external commands
    if ! uname -a | grep -i -q Microsoft; then
        echo "Error: Not running within WSL" >&2
        exit 1
    fi
    if [[ -z "$WSL_INTEROP" ]]; then
        echo "Error: Running within WSL, but WSL_INTEROP not set which means not launced direct from wsl.exe" >&2
        exit 1
    fi

    # Handle external commands if they exist
    if command -v wslutil-$1 >/dev/null 2>&1; then
        wslutil-$1 "$@"
        exit 0
    else
        echo "Usage: $(basename $0) [options] {doctor|shellenv|shim|setup|upgrade}"
        exit 1
    fi
    ;;
esac
