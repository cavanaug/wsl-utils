#!/bin/bash
#  ┌───────────────────────────────────────────────────────────────┐
#  │                                                               │
#  │    ██╗    ██╗███████╗██╗     ██╗   ██╗████████╗██╗██╗         │
#  │    ██║    ██║██╔════╝██║     ██║   ██║╚══██╔══╝██║██║         │
#  │    ██║ █╗ ██║███████╗██║     ██║   ██║   ██║   ██║██║         │
#  │    ██║███╗██║╚════██║██║     ██║   ██║   ██║   ██║██║         │
#  │    ╚███╔███╔╝███████║███████╗╚██████╔╝   ██║   ██║███████╗    │
#  │     ╚══╝╚══╝ ╚══════╝╚══════╝ ╚═════╝    ╚═╝   ╚═╝╚══════╝    │
#  │                                                               │
#  └───────────────────────────────────────────────────────────────┘
# wslutil - Windows Subsystem for Linux utility
#

# Function to handle 'shellenv' subcommand
shellenv_command() {
    # Add argument processing for 'shellenv' here
    SHELLENV=$(basename $SHELL)
    if [[ -f "${WSLUTIL_DIR}/env/shellenv.${SHELLENV}" ]]; then
        echo "WSLUTIL_DIR=${WSLUTIL_DIR}"
        cat "${WSLUTIL_DIR}/env/shellenv.${SHELLENV}"
    else
        echo "ERROR: Shellenv file not found for ${SHELLENV}" >&2
        exit 1
    fi
}

# Function to handle 'upgrade' subcommand
upgrade_command() {
    echo "Updating WSL utility..."
    # Add argument processing for 'upgrade' here
    while [[ $# -gt 0 ]]; do
        case "$1" in
        --fetch)
            echo "Fetch but dont apply upgrades."
            if ! (cd "$WSLUTIL_DIR" && git fetch); then
                echo "ERROR: Failed to fetch updates from git repository" >&2
                exit 1
            fi
            exit 0
            ;;
        *)
            echo "Unknown option for upgrade: $1" >/dev/null
            exit 1
            ;;
        esac
        shift
    done
    if ! (cd "$WSLUTIL_DIR" && git pull); then
        echo "ERROR: Failed to pull updates from git repository" >&2
        exit 1
    fi
}

# SHould make this a test if environment variable is set but doesnt match the the grandparent then error out.
# WSLUTIL_DIR=${WSLUTIL_DIR:-${HOME}/.wslutil}
WSLUTIL_DIR="$(dirname $(dirname "$0"))"

# Parse CLI arguments and dispatch to subcommands
case "$1" in
shellenv)
    if [[ "$2" == "--help" ]]; then
        echo "Usage: $(basename $0) shellenv"
        exit 0
    fi
    shift
    shellenv_command "$@"
    ;;
upgrade)
    if [[ "$2" == "--help" ]]; then
        echo "Usage: $(basename $0) upgrade [--check]"
        echo "  --check    Check for upgrades"
        exit 0
    fi
    shift
    upgrade_command "$@"
    exit 0 # Exit after upgrade command regardless of WSL check
    ;;
--help)
    echo "Usage: $(basename $0) <subcommand> [options]"
    echo "Subcommands:"
    echo "  doctor     Run a health check on the wslutil environment"
    echo "  shellenv   Setup the shell environment (eval the output)"
    echo "  setup      Setup & Configure system environment for wslutil (utilizes sudo)"
    echo "  upgrade    Upgrade the wslutil in place"
    if extras="$(compgen -c | grep '^wslutil-' | cut -f2 -d- | grep -E -v '(doctor|shellenv|setup|upgrade)')"; then
        printf "\nExtra Subcommands:\n"
        for i in $extras; do
            echo "  $i (as wslutil-$i)"
        done
    fi
    exit 0
    ;;
--version)
    # Generate version in format: yr.mo.day (git hash)
    if [[ -d "${WSLUTIL_DIR}/.git" ]]; then
        # Get HEAD commit date and hash from git
        cd "${WSLUTIL_DIR}"
        commit_date=$(git log -1 --format="%cd" --date=format:"%Y.%m.%d" 2>/dev/null)
        commit_hash=$(git log -1 --format="%h" 2>/dev/null)
        
        # Check for local changes
        local_changes=""
        if ! git diff --quiet 2>/dev/null || ! git diff --cached --quiet 2>/dev/null; then
            local_changes=" (modified)"
        elif [[ -n "$(git ls-files --others --exclude-standard 2>/dev/null)" ]]; then
            local_changes=" (untracked files)"
        fi
        
        if [[ -n "$commit_date" && -n "$commit_hash" ]]; then
            echo "wslutil ${commit_date} (${commit_hash})${local_changes}"
        else
            echo "wslutil unknown${local_changes}"
        fi
    else
        echo "wslutil unknown (not a git repository)"
    fi
    exit 0
    ;;
*)
    # Check if running within WSL by inspecting the environment
    # This check is bypassed for 'upgrade', '--help', and external commands
    if ! uname -a | grep -i -q Microsoft; then
        echo "Error: Not running within WSL" >&2
        exit 1
    fi

    # Handle external commands if they exist
    sub_command="$1"
    local_command="${WSLUTIL_DIR}/bin/wslutil-$1"
    shift
    if [[ -x "$local_command" ]]; then
        # Execute the command found in the wslutil bin directory
        "$local_command" "$@"
        exit $?
    elif command -v "wslutil-$1" >/dev/null 2>&1; then
        # Execute the command found in the system PATH
        "wslutil-${sub_command}" "$@"
        exit $?
    else
        # Command not found in either location
        echo "Usage: $(basename $0) [options] {doctor|shellenv|setup|upgrade}"
        exit 1
    fi
    ;;
esac
